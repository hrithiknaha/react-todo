{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","state","task","handleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","createTodo","id","uuidv4","completed","className","onSubmit","htmlFor","type","placeholder","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","updateTodo","toggleTodo","result","CSSTransition","key","timeout","classNames","onClick","TransitionGroup","class","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b392f62.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './NewTodoForm.css';\n\nclass NewTodoForm extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { task: '' };\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\thandleChange(evt) {\n\t\tthis.setState({\n\t\t\t[evt.target.name]: evt.target.value\n\t\t});\n\t}\n\thandleSubmit(evt) {\n\t\tevt.preventDefault();\n\t\tthis.props.createTodo({\n\t\t\t...this.state,\n\t\t\tid: uuidv4(),\n\t\t\tcompleted: false\n\t\t});\n\t\tthis.setState({ task: '' });\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<form className='NewTodoForm' onSubmit={this.handleSubmit}>\n\t\t\t\t<label htmlFor='task'>New Todo</label>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tplaceholder='New Todo'\n\t\t\t\t\tid='task'\n\t\t\t\t\tname='task'\n\t\t\t\t\tvalue={this.state.task}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<button>Add Todo</button>\n\t\t\t</form>\n\t\t);\n\t}\n}\nexport default NewTodoForm;\n","import React, { Component } from \"react\";\nimport \"./Todo.css\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      task: this.props.task\n    };\n    this.handleRemove = this.handleRemove.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n  handleRemove() {\n    this.props.removeTodo(this.props.id);\n  }\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing });\n  }\n  handleUpdate(evt) {\n    evt.preventDefault();\n    //take new task data and pass up to parent\n    this.props.updateTodo(this.props.id, this.state.task);\n    this.setState({ isEditing: false });\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n  handleToggle(evt) {\n    this.props.toggleTodo(this.props.id);\n  }\n  render() {\n    let result;\n    if (this.state.isEditing) {\n      result = (\n        <CSSTransition key='editing' timeout={500} classNames='form'>\n          <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\n            <input\n              type='text'\n              value={this.state.task}\n              name='task'\n              onChange={this.handleChange}\n            />\n            <button>Save</button>\n          </form>\n        </CSSTransition>\n      );\n    } else {\n      result = (\n        <CSSTransition key='normal' timeout={500} classNames='task-text'>\n          <li className='Todo-task' onClick={this.handleToggle}>\n            {this.props.task}\n          </li>\n        </CSSTransition>\n      );\n    }\n    return (\n      <TransitionGroup\n        className={this.props.completed ? \"Todo completed\" : \"Todo\"}\n      >\n        {result}\n        <div className='Todo-buttons'>\n          <button onClick={this.toggleForm}>\n            <i class='fas fa-pen' />\n          </button>\n          <button onClick={this.handleRemove}>\n            <i class='fas fa-trash' />\n          </button>\n        </div>\n      </TransitionGroup>\n    );\n  }\n}\nexport default Todo;\n","import React, { Component } from 'react';\nimport NewTodoForm from './NewTodoForm';\nimport Todo from './Todo';\nimport './TodoList.css';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nclass TodoList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttodos: []\n\t\t};\n\t\tthis.create = this.create.bind(this);\n\t\tthis.remove = this.remove.bind(this);\n\t\tthis.update = this.update.bind(this);\n\t\tthis.toggleCompletion = this.toggleCompletion.bind(this);\n\t}\n\tcreate(newTodo) {\n\t\tthis.setState({\n\t\t\ttodos: [...this.state.todos, newTodo]\n\t\t});\n\t}\n\tremove(id) {\n\t\tthis.setState({\n\t\t\ttodos: this.state.todos.filter((t) => t.id !== id)\n\t\t});\n\t}\n\tupdate(id, updatedTask) {\n\t\tconst updatedTodos = this.state.todos.map((todo) => {\n\t\t\tif (todo.id === id) {\n\t\t\t\treturn { ...todo, task: updatedTask };\n\t\t\t}\n\t\t\treturn todo;\n\t\t});\n\t\tthis.setState({ todos: updatedTodos });\n\t}\n\ttoggleCompletion(id) {\n\t\tconst updatedTodos = this.state.todos.map((todo) => {\n\t\t\tif (todo.id === id) {\n\t\t\t\treturn { ...todo, completed: !todo.completed };\n\t\t\t}\n\t\t\treturn todo;\n\t\t});\n\t\tthis.setState({ todos: updatedTodos });\n\t}\n\trender() {\n\t\tconst todos = this.state.todos.map((todo) => {\n\t\t\treturn (\n\t\t\t\t<CSSTransition key={todo.id} timeout={500} classNames='todo'>\n\t\t\t\t\t<Todo\n\t\t\t\t\t\tkey={todo.id}\n\t\t\t\t\t\tid={todo.id}\n\t\t\t\t\t\ttask={todo.task}\n\t\t\t\t\t\tcompleted={todo.completed}\n\t\t\t\t\t\tremoveTodo={this.remove}\n\t\t\t\t\t\tupdateTodo={this.update}\n\t\t\t\t\t\ttoggleTodo={this.toggleCompletion}\n\t\t\t\t\t/>\n\t\t\t\t</CSSTransition>\n\t\t\t);\n\t\t});\n\t\treturn (\n\t\t\t<div className='TodoList'>\n\t\t\t\t<h1>\n\t\t\t\t\tGet To Work!{' '}\n\t\t\t\t\t<span>An Animated Todo List Made With React Hooks.</span>\n\t\t\t\t</h1>\n\t\t\t\t<NewTodoForm createTodo={this.create} />\n\n\t\t\t\t<ul>\n\t\t\t\t\t<TransitionGroup className='todo-list'>\n\t\t\t\t\t\t{todos}\n\t\t\t\t\t</TransitionGroup>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport TodoList from \"./TodoList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}